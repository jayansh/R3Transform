package com.release3.tf.migrate;

import java.util.prefs.Preferences;

import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.TitleAreaDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseMoveListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.ToolTip;

public class CustomizationChooserDialog extends TitleAreaDialog {

	private static final String _StrMsg = "Customization files stores the settings used to migrate your form.";

	// this are our preferences we will be using as the IPreferenceStore is not
	// available yet
	public static Preferences preferences = Preferences
			.userNodeForPackage(CustomizationChooserDialog.class);

	public static final String REMEMBER_LAST_SELECTED_OPTION = "RememberLastSelectedOption";
	private Button btnAlwaysUseAutogenerated;
	private Button btnDefaultCustomization;
	private Label lblAutoGenCust;
	private Label lblDefaultCust;
	/**
	 * if this useDefaultCustomizationFlag = true implies that use default
	 * customization file else use autogenerated customization file
	 */
	private boolean useDefaultCustomizationFlag = true;

	/**
	 * Create the dialog.
	 * 
	 * @param parentShell
	 */
	public CustomizationChooserDialog(Shell parentShell) {
		super(parentShell);

	}

	/**
	 * Create contents of the dialog.
	 * 
	 * @param parent
	 */
	@Override
	protected Control createDialogArea(Composite parent) {
		setTitle("Select a Customization file.");
		setMessage(_StrMsg);
		Composite area = (Composite) super.createDialogArea(parent);
		Composite container = new Composite(area, SWT.NONE);
		container.setLayoutData(new GridData(GridData.FILL_BOTH));

		btnAlwaysUseAutogenerated = new Button(container, SWT.RADIO);
		btnAlwaysUseAutogenerated.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				useDefaultCustomizationFlag = !btnDefaultCustomization
						.getSelection();
			}
		});
		final ToolTip btnAlwaysUseAutogeneratedToolTip = new ToolTip(
				container.getShell(), SWT.NONE);
		btnAlwaysUseAutogeneratedToolTip
				.setText("If this option is selected,\n "
						+ "the autogenerated customization in workspace location will be used.");
		btnAlwaysUseAutogeneratedToolTip.setAutoHide(true);

		btnAlwaysUseAutogenerated.setBounds(10, 34, 23, 16);
		// btnAlwaysUseAutogenerated
		// .setText("Use autogenerated customization file.");
		// btnAlwaysUseAutogenerated.setSelection(true);

		btnDefaultCustomization = new Button(container, SWT.RADIO);
		btnDefaultCustomization.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {

				useDefaultCustomizationFlag = btnDefaultCustomization
						.getSelection();

				preferences.putBoolean(REMEMBER_LAST_SELECTED_OPTION,
						useDefaultCustomizationFlag);
			}
		});
		final ToolTip btnDefaultCustomizationToolTip = new ToolTip(
				container.getShell(), SWT.NONE);
		btnDefaultCustomizationToolTip
				.setText("If this option is selected,\n "
						+ "the customization file created in root of Transform\nSampleForms folder will be used as default.");
		btnDefaultCustomizationToolTip.setAutoHide(true);

		btnDefaultCustomization.setBounds(10, 77, 23, 16);
//		btnDefaultCustomization
//				.setText("Use default customization file (located in SampleForms folder).");
		btnDefaultCustomization.setSelection(preferences.getBoolean(
				REMEMBER_LAST_SELECTED_OPTION, false));

		Label lblOr = new Label(container, SWT.NONE);
		lblOr.setBounds(110, 56, 23, 15);
		lblOr.setText("OR");

		lblAutoGenCust = new Label(container, SWT.NONE);
		lblAutoGenCust.setBounds(39, 35, 213, 15);
		lblAutoGenCust.setText("Use autogenerated customization file.");
		lblAutoGenCust.addMouseMoveListener(new MouseMoveListener() {
			public void mouseMove(MouseEvent e) {
				btnAlwaysUseAutogeneratedToolTip.setVisible(true);
			}
		});
		lblDefaultCust = new Label(container, SWT.NONE);
		lblDefaultCust.setBounds(39, 78, 344, 15);
		lblDefaultCust
				.setText("Use default customization file (located in SampleForms folder).");
		lblDefaultCust.addMouseMoveListener(new MouseMoveListener() {
			public void mouseMove(MouseEvent e) {
				btnDefaultCustomizationToolTip.setVisible(true);
			}
		});
		return area;
	}

	/**
	 * Create contents of the button bar.
	 * 
	 * @param parent
	 */
	@Override
	protected void createButtonsForButtonBar(Composite parent) {
		createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL,
				true);
		createButton(parent, IDialogConstants.CANCEL_ID,
				IDialogConstants.CANCEL_LABEL, false);
	}

	/**
	 * Return the initial size of the dialog.
	 */
	@Override
	protected Point getInitialSize() {
		return new Point(657, 282);
	}
}
