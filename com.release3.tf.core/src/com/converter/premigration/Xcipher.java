package com.converter.premigration;

import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Security;
import java.security.Signature;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import com.converter.premigration.Base64String;

/**
 * encrypt and decrypt string
 */
public class Xcipher 
{
	private Base64String bs = new Base64String();
        /*
         * DesIV and cipherCode has been changed by jayansh on 26 Feb 2010
         */
	/*
	private static final byte[] DesIV = {101,102,103,104,105,106,107,108};	
        */
	 private static final byte[] DesIV = {109,108,107,106,105,104,103,102};
	/*
        private static final byte[] cipherCode =	
	{
		115, 85, -37, 16, -104, 52, 71, 53, 41, -123, 87, -71, 63, 55, 15, -70, -16, -11, -122, 121, 9, -123, -44, 59, -14, -58, 29, 105, 18, 16, -39, 49, 63, -119, 14, 9, -54, 24, 83, 39, 
		119, 107, 78, -24, 88, -85, 115, 59, -10, -25, 80, -92, -124, -85, 81, -18, -128, -96, 30, -47, 23, -34, 34, 24, -84, 37, 122, -74, 41, 6, -17, -41, -94, 94, 2, -98, 54, -20, -30, 70, 
		83, -31, 114, 42, -64, 52, -83, -108, 56, 32, -120, 42, -6, -126, 16, -103, 72, 53, 59, 50, 49, -67, 18, -16, -9, 120, 2, 37, -87, -78, -73, -108, -67, -41, 125, 53, 107, -9, 88, 119, 
		119, -27, 126, 8, 125, -59, -35, 31, 77, 104, 85, 1, -80, -81, 21, -106, -50, -127, 51, 72, 50, -121, -21, -123, 105, -13, 109, 35, 4, -38, 45, 80, -35, -60, -69, 75, 62, 10, 114, 50, 
		-102, -30, -40, 64, 93, -74, -28, 13, -62, -25, 102, -23, -60, 16, 68, -17, -6, -7, -97, -118, 88, -70, 27, 114, 58, 4, 35, -20, -12, -55, 87, -60, 15, 0, -83, 80, -81, -86, 39, -78, 
		15, 95, 97, 28, 115, 67, -116, -51, 127, -53, 81, 69, 107, -24, -38, -32, -57, 101, 5, 89, -110, -9, 24, -8, -113, -94, -38, -60, 98, -12, 64, 79, -47, -20, 122, -8, 89, -2, -2, -10, 
		120, 86, 108, 41, 119, 18, 89, 38, 37, -52, -120, 73, -91, -50, 32, 23, 70, 104, -115, -47, 105, -57, 106, -118, -118, 2, 115, 127, 110, -30, -121, -55, 103, 14, -32, 60, -117, -17, -127, 125, 
		73, -76, -98, -107, 108, -10, -86, 3, -53, 98, -78, -16, 113, 45, -115, -80, -20, -30, -98, 117, -98, -38, -72, 67, 69, -65, -30, -106, -19, -28, -116, 87, -26, 15, -120, -75, 41, -44, 30, -108, 
		88, 112, -77, 11, 48, -106, 87, 57, -127, 48, 79, -88, 80, 12, -33, 111, -5, 91, 80, -84, 20, 20, 21, -25, -43, 90, 9, 97, -92, -40, -121, 23, -60, 10, 29, 45, 39, -84, 19, -81, 
		103, -88, 20, -67, -108, -29, 6, -38, 48, 25, -71, -51, -124, 113, -128, 67, 91, -53, 54, -43, -116, -10, -107, -87, -88, 55, -28, 70, -17, -79, 71, 79, 71, -96, 68, 107, -1, 87, 83, -14, 
		84, 47, 49, -117, 30, -71, -109, 82, -118, -39, -46, 91, 118, 62, 34, 113, 19, 107, 21, 92, -2, -64, -21, 126, -47, 105, -122, -29, 44, 20, 68, 3, 119, 67, -128, 93, -60, 9, -118, -18, 
		-92, -110, -69, 22, -33, -21, -39, 9, 126, -45, 87, -109, 66, -10, -13, -108, 67, -78, -70, -76, 51, -80, 37, 117, -108, -50, -28, 50, -67, -59, -84, 10, -31, 38, -72, 108, 4, -43, -97, -27, 
		-112, 125, 100, 89, -67, -79, -63, -127, 80, -20, 25, 17, 79, -43, -69, -13, 109, 69, -127, 16, 7, -90, 75, -71, 38, 77, -78, 27, 62, -121, -113, 110, 19, -44, 36, -74, 75, -53, -72, -29, 
		13, 98, -30, -47, -85, -102, -70, 11, 106, -60, -1, -65, 83, -113, -35, -23, 49, -85, 50, 111, -2, -91, 66, -55, 92, -86, -2, 122, -79, 5, -88, -95, -115, -98, 2, -91, -60, 122, 13, -117, 
		-110, -90, -80, 121, -121, -48, 26, -124, -9, 58, -124, -97, -103, 73, -28, 103, 32, 24, 116, 0, -100, 63, 90, 101, 27, 94, 50, -75, -116, 56, 37, -73, -99, -90, -36, 87, -12, -56, 65, -116, 
		-112, 122, -125, 119, -128, 8, 7, 67, -71, -102, -124, -85, 6, 13, -17, 83, 76, 75, 94, 41, -98, 101, -9, -66, 21, -51, 1, -14, 108, -116, 115, 87, -41, -25, 112, 34, -68, -30, -27, 18, 
		86, -18, -4, -15, -77, 121, -79, -112, -73, -119, 11, -87, 106, 24, -18, 43, -126, -60, 98, -77, 6, 21, -41, 44, 39, 45, -44, 30, -100, -52, -106, 105, 102, 75, -45, -80, 104, 5, 11, -101, 
		28, 113, 58, -29, -127, -55, -20, -65, -7, 69, -97, -9, -128, 50, 12, 64, 22, -49, -54, -122, -92, -110, -12, -22, -14, -95, 67, 31, 69, 61, -62, 124, -71, -58, -106, -107, -37, -12, -86, 94, 
		64, 21, 36, 87, 44, -97, -23, 52, 63, -110, -103, -104, 59, -124, -9, -119, 124, 79, -16, -32, -123, -51, 122, -68, -126, 34, 61, -70, -101, 118, 101, 34, 37, 108, 69, -114, 110, -100, -67, 83, 
		-72, 15, -32, -78, -92, 41, 65, 52, -50, 12, 25, -117, 3, -54, -40, 115, -101, 104, -44, 10, 97, 46, -104, -55, 44, 118, 115, -50, 63, 104, 27, -33, -111, -100, 40, 117, -19, -57, 23, 88, 
		-31, 8, -21, -114, 92, -38, 30, 90, -109, -46, -13, 6, -56, -77, -14, -119, 119, 22, -122, 45, -74, 114, -11, 102, -15, 57, -7, 103, -94, 98, -123, -44, 80, 123, 40, 88, 66, 9, 108, 82, 
		87, 25, 59, 108, 116, 20, 23, -35, -87, -98, -2, -42, 65, -22, -94, 110, 19, -123, -100, 35, -32, -73, -73, 49, 76, 31, -75, 76, -118, -103, 70, 109, -86, 51, -43, -99, 55, -120, -15, -35, 
		33, 27, -67, 4, 99, -81, -110, 102, -39, -70, 69, -67, 108, 72, 113, -96, 97, 10, 31, 85, 94, -53, 83, 15, 87, -111, 43, 13, 20, 4, 54, -118, -108, -65, 1, -59, -7, -77, -51, -99, 
		-116, 79, 114, -48, 84, -119, 0, 98, -62, 52, 59, 45, 105, -101, 126, 86, -56, -83, -84, -46, -125, -123, 81, -44, -124, -69, 40, -84, 70, -84, -89, -83, 61, -126, -56, 14, 88, -126, -69, -51, 
		-112, -55, 74, -33, -55, 9, 32, -8, 65, -85, -4, 75, 6, -6, 26, 7, -2, -98, 75, -103, 96, 83, 28, 22, -115, -115, -16, -25, -45, 111, -2, 69, -14, -34, 65, -70, 58, 113, 11, 123, 
	};
*/
    private static final byte[] cipherCode =        
    {
            51, 11, -21, 1, -23, 34, -1, 53, 23, -21, -87,34, 43, 92, 5, 50, -106, 101, -12, 121, 9, -123, -44, 59, -14, -58, 29, 105, 18, 16, -39, 49, 63, -119, 14, 9, -54, 24, 83, 39, 
            119, 107, 78, -24, 88, -85, 115, 59, -10, -25, 80, -92, -124, -85, 81, -18, -128, -96, 30, -47, 23, -34, 34, 24, -84, 37, 122, -74, 41, 6, -17, -41, -94, 94, 2, -98, 54, -20, -30, 70, 
            83, -31, 114, 42, -64, 52, -83, -108, 56, 32, -120, 42, -6, -126, 16, -103, 72, 53, 59, 50, 49, -67, 18, -16, -9, 120, 2, 37, -87, -78, -73, -108, -67, -41, 125, 53, 107, -9, 88, 119, 
            119, -27, 126, 8, 125, -59, -35, 31, 77, 104, 85, 1, -80, -81, 21, -106, -50, -127, 51, 72, 50, -121, -21, -123, 105, -13, 109, 35, 4, -38, 45, 80, -35, -60, -69, 75, 62, 10, 114, 50, 
            -102, -30, -40, 64, 93, -74, -28, 13, -62, -25, 102, -23, -60, 16, 68, -17, -6, -7, -97, -118, 88, -70, 27, 114, 58, 4, 35, -20, -12, -55, 87, -60, 15, 0, -83, 80, -81, -86, 39, -78, 
            15, 95, 97, 28, 115, 67, -116, -51, 127, -53, 81, 69, 107, -24, -38, -32, -57, 101, 5, 89, -110, -9, 24, -8, -113, -94, -38, -60, 98, -12, 64, 79, -47, -20, 122, -8, 89, -2, -2, -10, 
            120, 86, 108, 41, 119, 18, 89, 38, 37, -52, -120, 73, -91, -50, 32, 23, 70, 104, -115, -47, 105, -57, 106, -118, -118, 2, 115, 127, 110, -30, -121, -55, 103, 14, -32, 60, -117, -17, -127, 125, 
            73, -76, -98, -107, 108, -10, -86, 3, -53, 98, -78, -16, 113, 45, -115, -80, -20, -30, -98, 117, -98, -38, -72, 67, 69, -65, -30, -106, -19, -28, -116, 87, -26, 15, -120, -75, 41, -44, 30, -108, 
            88, 112, -77, 11, 48, -106, 87, 57, -127, 48, 79, -88, 80, 12, -33, 111, -5, 91, 80, -84, 20, 20, 21, -25, -43, 90, 9, 97, -92, -40, -121, 23, -60, 10, 29, 45, 39, -84, 19, -81, 
            103, -88, 20, -67, -108, -29, 6, -38, 48, 25, -71, -51, -124, 113, -128, 67, 91, -53, 54, -43, -116, -10, -107, -87, -88, 55, -28, 70, -17, -79, 71, 79, 71, -96, 68, 107, -1, 87, 83, -14, 
            84, 47, 49, -117, 30, -71, -109, 82, -118, -39, -46, 91, 118, 62, 34, 113, 19, 107, 21, 92, -2, -64, -21, 126, -47, 105, -122, -29, 44, 20, 68, 3, 119, 67, -128, 93, -60, 9, -118, -18, 
            -92, -110, -69, 22, -33, -21, -39, 9, 126, -45, 87, -109, 66, -10, -13, -108, 67, -78, -70, -76, 51, -80, 37, 117, -108, -50, -28, 50, -67, -59, -84, 10, -31, 38, -72, 108, 4, -43, -97, -27, 
            -112, 125, 100, 89, -67, -79, -63, -127, 80, -20, 25, 17, 79, -43, -69, -13, 109, 69, -127, 16, 7, -90, 75, -71, 38, 77, -78, 27, 62, -121, -113, 110, 19, -44, 36, -74, 75, -53, -72, -29, 
            13, 98, -30, -47, -85, -102, -70, 11, 106, -60, -1, -65, 83, -113, -35, -23, 49, -85, 50, 111, -2, -91, 66, -55, 92, -86, -2, 122, -79, 5, -88, -95, -115, -98, 2, -91, -60, 122, 13, -117, 
            -110, -90, -80, 121, -121, -48, 26, -124, -9, 58, -124, -97, -103, 73, -28, 103, 32, 24, 116, 0, -100, 63, 90, 101, 27, 94, 50, -75, -116, 56, 37, -73, -99, -90, -36, 87, -12, -56, 65, -116, 
            -112, 122, -125, 119, -128, 8, 7, 67, -71, -102, -124, -85, 6, 13, -17, 83, 76, 75, 94, 41, -98, 101, -9, -66, 21, -51, 1, -14, 108, -116, 115, 87, -41, -25, 112, 34, -68, -30, -27, 18, 
            86, -18, -4, -15, -77, 121, -79, -112, -73, -119, 11, -87, 106, 24, -18, 43, -126, -60, 98, -77, 6, 21, -41, 44, 39, 45, -44, 30, -100, -52, -106, 105, 102, 75, -45, -80, 104, 5, 11, -101, 
            28, 113, 58, -29, -127, -55, -20, -65, -7, 69, -97, -9, -128, 50, 12, 64, 22, -49, -54, -122, -92, -110, -12, -22, -14, -95, 67, 31, 69, 61, -62, 124, -71, -58, -106, -107, -37, -12, -86, 94, 
            64, 21, 36, 87, 44, -97, -23, 52, 63, -110, -103, -104, 59, -124, -9, -119, 124, 79, -16, -32, -123, -51, 122, -68, -126, 34, 61, -70, -101, 118, 101, 34, 37, 108, 69, -114, 110, -100, -67, 83, 
            -72, 15, -32, -78, -92, 41, 65, 52, -50, 12, 25, -117, 3, -54, -40, 115, -101, 104, -44, 10, 97, 46, -104, -55, 44, 118, 115, -50, 63, 104, 27, -33, -111, -100, 40, 117, -19, -57, 23, 88, 
            -31, 8, -21, -114, 92, -38, 30, 90, -109, -46, -13, 6, -56, -77, -14, -119, 119, 22, -122, 45, -74, 114, -11, 102, -15, 57, -7, 103, -94, 98, -123, -44, 80, 123, 40, 88, 66, 9, 108, 82, 
            87, 25, 59, 108, 116, 20, 23, -35, -87, -98, -2, -42, 65, -22, -94, 110, 19, -123, -100, 35, -32, -73, -73, 49, 76, 31, -75, 76, -118, -103, 70, 109, -86, 51, -43, -99, 55, -120, -15, -35, 
            33, 27, -67, 4, 99, -81, -110, 102, -39, -70, 69, -67, 108, 72, 113, -96, 97, 10, 31, 85, 94, -53, 83, 15, 87, -111, 43, 13, 20, 4, 54, -118, -108, -65, 1, -59, -7, -77, -51, -99, 
            -116, 79, 114, -48, 84, -119, 0, 98, -62, 52, 59, 45, 105, -101, 126, 86, -56, -83, -84, -46, -125, -123, 81, -44, -124, -69, 40, -84, 70, -84, -89, -83, 61, -126, -56, 14, 88, -126, -69, -51, 
            -112, -55, 74, -33, -55, 9, 32, -8, 65, -85, -4, 75, 6, -6, 26, 7, -2, -98, 75, -103, 96, 83, 28, 22, -115, -115, -16, -25, -45, 111, -2, 69, -14, -34, 65, -70, 58, 113, 11, 123, 
    };

	private Cipher cipher;
	private SecretKeySpec myKey;
	private IvParameterSpec ivspec;
	
	private KeyPairGenerator keygen;
	private KeyPair keypair;
	private PrivateKey privkey;
	private PublicKey pubkey;
    
	private Signature sig;
	
    private byte[] GetKey(int pos,int length)
    {
		byte[] key = new byte[length];
		for(int i=0; i < length; i++)
		{
			key[i] = cipherCode[i + pos];
		}
		return key;   	
    }
	
	// encrypt using Cipher code and DesIV code
	private byte[] Encrypt(byte[] bytes,int pos,int EncodeId)
	{
		try
		{
			Security.addProvider(new com.sun.crypto.provider.SunJCE());
			switch(EncodeId)
			{
				case 0:
					cipher = Cipher.getInstance("DESede/CBC/PKCS5Padding");
					myKey = new SecretKeySpec(GetKey(pos,24),"DESede");
					ivspec = new IvParameterSpec(DesIV);			
					cipher.init(Cipher.ENCRYPT_MODE,myKey,ivspec);
					return cipher.doFinal(bytes);
				case 1:
					cipher = Cipher.getInstance("DES/CBC/PKCS5Padding");
					myKey = new SecretKeySpec(GetKey(pos,8),"DES");
					ivspec = new IvParameterSpec(DesIV);			
					cipher.init(Cipher.ENCRYPT_MODE, myKey,ivspec);
					return cipher.doFinal(bytes);
				case 2:
					cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
					keygen = KeyPairGenerator.getInstance("RSA");
				    keygen.initialize(512);
				    keypair = keygen.generateKeyPair();
				    pubkey = keypair.getPublic();
				    cipher.init(Cipher.ENCRYPT_MODE,pubkey);
					return cipher.doFinal(bytes);
				case 99:
					String str = "12345";
					sig = Signature.getInstance("SHA1withRSA");
					keygen = KeyPairGenerator.getInstance("RSA");
				    keygen.initialize(512);
				    keypair = keygen.generateKeyPair();
				    privkey = keypair.getPrivate();
					sig.initSign(privkey);
					sig.update(str.getBytes("UTF8"));
					return sig.sign();
				default:
					return null;
			}
		}
		catch(Exception e)
		{
//			System.out.println("en " + e);
			return null;
		}	
	}
	
	// decrypt using Cipher code and DesIV code
	private byte[] Decrypt(byte[] bytes,int pos,int EncodeId)
	{
		try
		{
			switch(EncodeId)
			{
				case 0:
					cipher = Cipher.getInstance("DESede/CBC/PKCS5Padding");
					myKey = new SecretKeySpec(GetKey(pos,24),"DESede");
					ivspec = new IvParameterSpec(DesIV);			
					cipher.init(Cipher.DECRYPT_MODE,myKey,ivspec);
					return cipher.doFinal(bytes);
				case 1:
					cipher = Cipher.getInstance("DES/CBC/PKCS5Padding");
					myKey = new SecretKeySpec(GetKey(pos,8),"DES");
					ivspec = new IvParameterSpec(DesIV);			
					cipher.init(Cipher.DECRYPT_MODE, myKey,ivspec);
					return cipher.doFinal(bytes);
				case 2:
					cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
					privkey= keypair.getPrivate();
					cipher.init(Cipher.DECRYPT_MODE,privkey);
					return cipher.doFinal(bytes);
				default:
					return null;
			}
		}
		catch(Exception e)
		{
//			System.out.println("de " + e);
			return null;
		}
	}

	public String EncryptCode(String sc_str,int pos,int EncodeId)
	{
		byte[] bytes;
		try
		{
			bytes = sc_str.getBytes("UTF-8");
			return bs.toBase64String(Encrypt(bytes,pos,EncodeId));
		}
		catch(Exception e)
		{
			return null;
		}
	}
	
	public String DecryptCode(String de_str,int pos,int EncodeId)
	{
		byte[] bytes;
		try
		{
			bytes = bs.fromBase64String(de_str);
			String str = "";
			str = new String(Decrypt(bytes,pos,EncodeId),"UTF-8");
			return str; 
		}
		catch(Exception e)
		{
			return null;
		}
	}

    public PrivateKey getPrivkey() {
        return privkey;
    }

    public PublicKey getPubkey() {
        return pubkey;
    }
}
